#### BiqBin makefile ####

# Directories
OBJ = Obj

# Compiler
CC = mpicc
CPP = mpic++

LINALG 	 = -lopenblas -lm 
OPTI     = -O3 -ffast-math -fexceptions -fPIC -fno-common

PYBOOST = -I/usr/local/include/python3.12 \
		  -I/usr/include \
		  -L/usr/lib -lboost_python312 -lpython3.12 -lboost_numpy312

#-I/home/beno/anaconda3/envs/py312/include/python3.12 \
#-lboost_numpy312

INCLUDES += $(PYBOOST)
# Python module (Boost)
PYMOD_SRC = wrapper.cpp
PYMOD_OUT = solver.so
# binary
BINS =  biqbin

# BiqBin objects
BBOBJS = $(OBJ)/bundle.o $(OBJ)/allocate_free.o $(OBJ)/bab_functions.o \
	 	$(OBJ)/bounding.o $(OBJ)/cutting_planes.o \
         $(OBJ)/evaluate.o $(OBJ)/heap.o $(OBJ)/ipm_mc_pk.o \
         $(OBJ)/heuristic.o $(OBJ)/main.o $(OBJ)/operators.o \
         $(OBJ)/process_input.o $(OBJ)/qap_simulated_annealing.o \
		 $(OBJ)/bqp_data_processing.o

BBOBJSCPP =	$(OBJ)/wrapper.o

# All objects
OBJS = $(BBOBJS) $(BBOBJSCPP)

CFLAGS = $(OPTI) -Wall -W -pedantic 

#### Rules ####

.PHONY : all clean

# Default rule is to create all binaries #
all: $(BINS) $(PYMOD_OUT)

# Rules for binaries
$(BINS): $(OBJS)
	$(CPP) -o $@ $^ $(INCLUDES) $(LIB) $(CFLAGS) $(LINALG)

# BiqBin code rules
$(OBJ)/%.o: %.c
	$(CC) $(CFLAGS) $(INCLUDES) -c -o $@ $<

$(OBJ)/%.o: %.cpp
	$(CPP) $(CFLAGS) $(INCLUDES) -c -o $@ $<

# Python module rule
$(PYMOD_OUT): $(OBJS)
	$(CPP) -o $@ $^ -shared -fPIC $(INCLUDES) $(LIB) $(CFLAGS) $(LINALG) -Wl,--no-undefined


# Clean rule #
clean :
	rm -rf $(BINS) $(OBJS) $(PYMOD_OUT)

clean-output:
	rm -rf rudy/*.output*
	rm -rf Instances/rudy/*.output*

	
# TESTS
TEST_ALL_60 = 	for i in $(shell seq 0 9); do \
			./test.sh \
			"mpiexec ./$(BINS)" \
			rudy/g05_60.$$i \
			rudy/g05_60.$$i-expected_output \
			params ;\
	done

TEST_ALL_80 = 	for i in $(shell seq 0 9); do \
			./test.sh \
			"mpiexec ./$(BINS)" \
			rudy/g05_80.$$i \
			rudy/g05_80.$$i-expected_output \
			params ;\
	done

TEST_ALL_100 = 	for i in $(shell seq 0 9); do \
			./test.sh \
			"mpiexec ./$(BINS)" \
			rudy/g05_100.$$i \
			rudy/g05_100.$$i-expected_output \
			params ;\
	done

# TESTS
TEST_ALL_60_PYTHON = 	for i in $(shell seq 0 9); do \
			./test.sh \
			"mpiexec python3 test.py" \
			rudy/g05_60.$$i \
			rudy/g05_60.$$i-expected_output \
			params ;\
	done

TEST_ALL_80_PYTHON = 	for i in $(shell seq 0 9); do \
			./test.sh \
			"mpiexec python3 test.py" \
			rudy/g05_80.$$i \
			rudy/g05_80.$$i-expected_output \
			params ;\
	done

TEST_ALL_100_PYTHON = 	for i in $(shell seq 0 9); do \
			./test.sh \
			"mpiexec python3 test.py" \
			rudy/g05_100.$$i \
			rudy/g05_100.$$i-expected_output \
			params ;\
	done

test-all:
	$(TEST_ALL_60)
	$(TEST_ALL_80)
	$(TEST_ALL_100)

test:
	$(TEST_ALL_60)

test-python:
	$(TEST_ALL_60_PYTHON)

test-all-python:
	$(TEST_ALL_60_PYTHON)
	$(TEST_ALL_80_PYTHON)
	$(TEST_ALL_100_PYTHON)